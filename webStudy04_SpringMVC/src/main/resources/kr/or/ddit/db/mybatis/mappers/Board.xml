<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.board.dao.IBoardDAO">
	<sql id="searchFrag">
		<where>
			<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<choose>
					<when test="'title'.equals(searchVO.searchType)">
						INSTR(BO_TITLE, #{searchVO.searchWord}) > 0
					</when>
					<when test="'writer'.equals(searchVO.searchType)">
						INSTR(BO_WRITER, #{searchVO.searchWord}) > 0
					</when>
					<when test="'content'.equals(searchVO.searchType)">
						INSTR(BO_CONTENT, #{searchVO.searchWord}) > 0
					</when>
					<otherwise>
						INSTR(BO_CONTENT, #{searchVO.searchWord}) > 0
						OR INSTR(BO_WRITER, #{searchVO.searchWord}) > 0
						OR INSTR(BO_TITLE, #{searchVO.searchWord}) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	<select id="selectBoardCount" parameterType="PagingVO" resultType="int">
		SELECT COUNT(*)
		FROM BOARD
		<include refid="searchFrag" />
	</select>
	<select id="selectBoardList" parameterType="PagingVO" resultType="BoardVO">
		WITH REPLYCNT AS
		(
		    SELECT BO_NO, COUNT(REP_NO) REP_CNT
		    FROM REPLY
		    GROUP BY BO_NO
		)
		SELECT B.*
		FROM (
			SELECT ROWNUM RNUM, A.*
			FROM (
				<![CDATA[
				SELECT
				    A.BO_NO,    
				    DECODE(LEVEL, 1, '', LPAD('re:', 6*2*(LEVEL-1) + 3, '&nbsp;')) || BO_TITLE BO_TITLE,	
				    BO_WRITER,    TO_CHAR(BO_DATE, 'YYYY-MM-DD HH:MI') BO_DATE,    
				    BO_HIT,		BO_REC,    BO_PARENT, NVL(REP_CNT, 0) REP_CNT
				    , BO_DELETE
				FROM BOARD A LEFT OUTER JOIN REPLYCNT B ON (A.BO_NO = B.BO_NO)
				]]>
				<include refid="searchFrag" />
				START WITH BO_PARENT IS NULL
				CONNECT BY PRIOR A.BO_NO = BO_PARENT
				ORDER SIBLINGS BY A.BO_NO DESC
			) A
		) B
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	<insert id="insertBoard" parameterType="BoardVO">
		<selectKey order="BEFORE" keyProperty="bo_no" resultType="int">
			SELECT NVL(MAX(BO_NO), 0)+1
			FROM BOARD
		</selectKey>
		INSERT INTO board (
		    BO_NO,    BO_CONTENT,    
		    BO_TITLE, BO_WRITER,   
		    BO_PASS,    BO_IP,
		    BO_MAIL
		    <if test="bo_parent!=null and bo_parent gt 0">
		    	, BO_PARENT
		    </if>
		) VALUES (
		  	#{bo_no,jdbcType=NUMERIC},    #{bo_content,jdbcType=CLOB},    
		  	#{bo_title,jdbcType=VARCHAR}, #{bo_writer,jdbcType=VARCHAR},   
		  	#{bo_pass,jdbcType=VARCHAR},    #{bo_ip,jdbcType=VARCHAR},
		    #{bo_mail,jdbcType=VARCHAR}
		    <if test="bo_parent!=null and bo_parent gt 0">
		    	, #{bo_parent,jdbcType=NUMERIC}
		    </if>
		)
	</insert>
	<resultMap type="BoardVO" id="boardMap" autoMapping="true">
		<id property="bo_no" column="BONO"/>
		<collection property="attatchList" ofType="AttatchVO" autoMapping="true">
			<id property="att_no" column="ATT_NO"/>
		</collection>
<!-- 		<collection property="replyList" ofType="ReplyVO" autoMapping="true"> -->
<!-- 			<id property="rep_no" column="REP_NO"/> -->
<!-- 		</collection> -->
	</resultMap>
	
	<select id="selectBoard" parameterType="int" resultMap="boardMap">
		SELECT
   			A.BO_NO BONO,    BO_CONTENT,    BO_TITLE,
		    BO_WRITER,    BO_DATE,    BO_HIT,
		    BO_REC,    BO_PASS,    BO_IP,
		    BO_MAIL,    BO_PARENT
		    , 	ATT_NO,    ATT_SAVENAME,    ATT_FILENAME,
			    ATT_MIME,    ATT_FILESIZE, ATT_FANCY,    ATT_DOWNCOUNT
		    , 	REP_NO, REP_WRITER ,REP_DATE,
		        REP_PASS,REP_CONTENT, REP_IP
		FROM    BOARD A LEFT OUTER JOIN ATTATCH B ON (A.BO_NO = B.BO_NO)
		                LEFT OUTER JOIN REPLY C ON (A.BO_NO = C.BO_NO)
		WHERE A.BO_NO = #{bo_no}
	</select>
	<update id="incrementHit" parameterType="int">
		UPDATE BOARD
		SET BO_HIT = BO_HIT + 1
		WHERE BO_NO = #{bo_no}
	</update>
	<update id="incrementRecCnt" parameterType="int">
		UPDATE BOARD
		SET BO_REC = BO_REC + 1
		WHERE BO_NO = #{bo_no}
	</update>
	<update id="updateBoard" parameterType="BoardVO">
		UPDATE BOARD
		SET
			BO_TITLE = #{bo_title,jdbcType=VARCHAR},
			BO_MAIL	 = #{bo_mail,jdbcType=VARCHAR},
			BO_CONTENT = #{bo_content,jdbcType=CLOB}
		WHERE BO_NO = #{bo_no}
	</update>
<!-- 	<delete id="deleteBoard" parameterType="int"> -->
<!-- 		DELETE FROM BOARD -->
<!-- 		WHERE BO_NO IN ( -->
<!-- 			SELECT BO_NO -->
<!-- 			FROM BOARD -->
<!-- 			START WITH BO_NO = #{bo_no} -->
<!-- 			CONNECT BY PRIOR BO_NO = BO_PARENT -->
<!-- 		) -->
<!-- 	</delete> -->
<!-- 	루트글이 삭제되더라도 답글을 삭제하지 않기 위한 변경(상태 컬럼을 활용할수도 있음). -->
	<delete id="deleteBoard" parameterType="int">
		MERGE INTO BOARD A
		USING(
		    SELECT COUNT(BO_NO) CNT
		    FROM BOARD
		    START WITH BO_NO = #{bo_no}
		    CONNECT BY PRIOR BO_NO = BO_PARENT
		) B ON (A.BO_NO = #{bo_no})
		WHEN MATCHED THEN
		   UPDATE SET
		    BO_TITLE = '삭제된 글',
		    BO_CONTENT = '삭제된 글의 내용',
		    BO_DELETE = 'Y'
		   DELETE WHERE B.CNT = 1
	</delete>
</mapper>





























