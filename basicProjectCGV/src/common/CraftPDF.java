package common;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.Color;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CraftPDF {

	// 파일이 생성되는 경로
	private static String FILE = "D:/CGV_ticket_pdf.pdf";

	// 사용할 폰트를 미리 지정하는 부분
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);
	private static String admin = "신광진";

	public static void makePdf() {

		try {
			// BaseFont bFont = BaseFont.createFont("fonts/malgun.ttf",
			// BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			// Font font = new Font(bFont, 12);

			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();

			addMetaData(document); // insert MetaData
			addImage(document); // insert Image
			addTitlePage(document); // insert content
			document.close(); // closeDocument

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	static void addMetaData(Document document) {
		document.addTitle("User Ticket");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("GCV Manager");
		document.addCreator("GCV Manager");
	}

	static void addImage(Document document) {

		try {
			String imageUrl = "https://user-images.githubusercontent.com/67519366/92568214-d08d1580-f2b9-11ea-92ce-65558c84b196.jpg";
			Image image = Image.getInstance(new URL(imageUrl));
			image.scaleAbsolute(530f, 300f);
			document.add(image);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String imageUrl = "https://user-images.githubusercontent.com/67519366/92566868-d3870680-f2b7-11ea-9b6d-ea07dbf69362.jpg";
			Image image = Image.getInstance(new URL(imageUrl));
			image.scaleAbsolute(530f, 150f);
			image.setAbsolutePosition(20f, 100f);
			document.add(image);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// try {
		// String imageUrl =
		// "https://user-images.githubusercontent.com/67519366/92567386-940cea00-f2b8-11ea-81d3-11d379f56c3a.png";
		// Image image = Image.getInstance(new URL(imageUrl));
		// image.scaleAbsolute(50f, 50f);
		// image.setAbsolutePosition(300f, 250f);
		// document.add(image);
		// } catch (Exception e) {
		// e.printStackTrace();
		// }

	}

	static void addTitlePage(Document document)
			throws DocumentException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
		BaseFont gulim_font = null;
		BaseFont mal_font = null;
		BaseFont mal_bold_font = null;
		BaseFont red_mal_bold_font = null;

		// Font 경로
		String gulim = "D:/font/gulim.ttf";
		String malgun = "D:/font/malgun.ttf";
		String malgunBold = "D:/font/malgunbd.ttf";
		String malgunRedBold = "D:/font/malgunbd.ttf";

		try {
			// BaseFont 생성
			gulim_font = BaseFont.createFont(gulim, BaseFont.IDENTITY_H,
					BaseFont.EMBEDDED);
			mal_font = BaseFont.createFont(malgun, BaseFont.IDENTITY_H,
					BaseFont.EMBEDDED);
			mal_bold_font = BaseFont.createFont(malgunBold,
					BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			red_mal_bold_font = BaseFont.createFont(malgunBold,
					BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// 사용가능한 Font 객체 생성
		Font g_font = new Font(gulim_font, 12);
		Font m_font = new Font(mal_font, 12);
		Font mb_font = new Font(mal_bold_font, 16);
		Font red_mb_font = new Font(red_mal_bold_font, 10);
		red_mb_font.setColor(BaseColor.RED);

		//
		Paragraph preface = new Paragraph();

		// We add one empty line
		addEmptyLine(preface, 1);

		// Lets write a big header
		preface.add(new Paragraph("CGV 예약확인 티켓", mb_font));
		preface.add(new Paragraph("예약확인 담당자 : " + admin, m_font));

		addEmptyLine(preface, 2);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("전수빈 회원님의 예약목록", mb_font));
		preface.add(new Paragraph("예약번호 : " + "No. 12754", m_font));
		preface.add(new Paragraph("예약날짜 : " + sdf.format(new Date()), m_font));
		preface.add(new Paragraph("영화 제목 : " + "Tenet", m_font));
		preface.add(new Paragraph("상영관 번호 : " + "1관(4DX)", m_font));
		preface.add(new Paragraph("좌석번호 : " + "K-12", m_font));

		addEmptyLine(preface, 12);

		preface.add(new Paragraph(
				"예약확인 PDF파일은 예약자 본인만 사용할 수 있으며, 타인에게 공유, 양도하는경우 법적처벌을 받을 수 있습니다.",
				red_mb_font));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
